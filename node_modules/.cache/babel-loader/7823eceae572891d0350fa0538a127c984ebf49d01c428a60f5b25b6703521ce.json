{"ast":null,"code":"var _jsxFileName = \"/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/TimeSeriesRating.js\";\nimport React from 'react';\nimport { Chart as ChartJS, TimeScale, LinearScale, LineElement, PointElement, Title, Tooltip, Legend } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Line } from \"react-chartjs-2\";\nimport { milliseconds, millisecondsInHour, monthsInQuarter } from 'date-fns';\nimport { de } from 'date-fns/locale';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(TimeScale, LinearScale, LineElement, PointElement, Title, Tooltip, Legend, zoomPlugin);\n\n// I can also pass the currentColorState and display only white or only black or both \n// I can also pass the result of each game, and if its a win it will be a green dot vs  red dot\nfunction TimeSeriesRating(_ref) {\n  let {\n    cumulativeData\n  } = _ref;\n  // console.log(cumulativeData.map((game)=>Object.keys(game)[0]));\n\n  // data must be in this format: [ {timedata in ms since 1970: value},...]\n\n  console.log(`before: ${cumulativeData[0].result}`);\n  const data = {\n    labels: cumulativeData.map(game => {\n      let strDate = Object.keys(game)[0];\n      let intDate = parseInt(strDate);\n      return intDate;\n    }),\n    datasets: [{\n      label: \"Rating\",\n      data: cumulativeData ? [] : cumulativeData.map(game => Object.values(game)[0]),\n      // backgroundColor: 'aqua',\n      borderColor: 'black',\n      // tension: 1,\n      pointBackgroundColor: function (context) {\n        var index = context.dataIndex;\n        var curResult = cumulativeData[index].result;\n        if (curResult === 'win') {\n          return 'green';\n        } else if (curResult === 'loss') {\n          return 'red';\n        } else {\n          return 'blue';\n        }\n      }\n    }]\n  };\n  const options = {\n    scales: {\n      y: {},\n      x: {\n        adapters: {\n          date: {\n            locale: de\n          }\n        },\n        type: 'time',\n        time: {\n          // unit: 'millisecond',\n          format: 'timeFormat'\n          // round: 'second'\n        },\n\n        ticks: {\n          source: 'auto'\n        }\n      }\n    },\n    plugins: {\n      title: {\n        display: true,\n        text: \"Rating over Time\",\n        font: {\n          size: 35\n        }\n      },\n      zoom: {\n        zoom: {\n          wheel: {\n            enabled: true\n          },\n          pinch: {\n            enabled: true\n          },\n          mode: 'xy',\n          drag: {\n            enabled: true\n          }\n        },\n        limits: {\n          x: {\n            min: 'original',\n            max: 'original'\n          },\n          y: {\n            min: 'original',\n            max: 'original'\n          }\n        },\n        pan: {\n          // enabled: 'True'\n        }\n      },\n      legend: {\n        display: false\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c = TimeSeriesRating;\nexport default TimeSeriesRating;\nvar _c;\n$RefreshReg$(_c, \"TimeSeriesRating\");","map":{"version":3,"names":["React","Chart","ChartJS","TimeScale","LinearScale","LineElement","PointElement","Title","Tooltip","Legend","Line","milliseconds","millisecondsInHour","monthsInQuarter","de","zoomPlugin","jsxDEV","_jsxDEV","Fragment","_Fragment","register","TimeSeriesRating","_ref","cumulativeData","console","log","result","data","labels","map","game","strDate","Object","keys","intDate","parseInt","datasets","label","values","borderColor","pointBackgroundColor","context","index","dataIndex","curResult","options","scales","y","x","adapters","date","locale","type","time","format","ticks","source","plugins","title","display","text","font","size","zoom","wheel","enabled","pinch","mode","drag","limits","min","max","pan","legend","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/TimeSeriesRating.js"],"sourcesContent":["import React from 'react';\nimport {\n    Chart as ChartJS,\n    TimeScale,\n    LinearScale,\n    LineElement,\n    PointElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Line } from \"react-chartjs-2\";\nimport { milliseconds, millisecondsInHour, monthsInQuarter } from 'date-fns';\nimport {de} from 'date-fns/locale';\nimport zoomPlugin from 'chartjs-plugin-zoom';\n\n\n\n\nChartJS.register(\n    TimeScale,\n    LinearScale,\n    LineElement,\n    PointElement,\n    Title,\n    Tooltip,\n    Legend,\n    zoomPlugin\n);\n\n// I can also pass the currentColorState and display only white or only black or both \n// I can also pass the result of each game, and if its a win it will be a green dot vs  red dot\nfunction TimeSeriesRating({ cumulativeData }) {\n\n    // console.log(cumulativeData.map((game)=>Object.keys(game)[0]));\n\n    // data must be in this format: [ {timedata in ms since 1970: value},...]\n    \n\n     console.log(`before: ${cumulativeData[0].result}`)\n    const data = {\n        labels : cumulativeData.map((game)=>{\n            let strDate = Object.keys(game)[0];\n            let intDate = parseInt(strDate)\n            return intDate;\n        }\n        ),\n        datasets: [\n            {\n                label: \"Rating\",\n                data: (cumulativeData ? []:cumulativeData.map((game)=>Object.values(game)[0])),\n                // backgroundColor: 'aqua',\n                borderColor: 'black',\n                // tension: 1,\n                pointBackgroundColor: function(context) {\n                    var index = context.dataIndex;\n                    var curResult = cumulativeData[index].result;\n                    if (curResult==='win'){\n                        return 'green';\n                    }else if(curResult==='loss'){\n                        return 'red';\n                    }else{\n                        return 'blue';\n                    }\n                }\n            }\n        ]\n    }\n\n\n    const options = {\n        scales: {\n            y: {\n\n            },\n            x: {\n                adapters: {\n                    date: {\n                        locale: de\n                    }\n                },\n                type: 'time',\n                time: {\n                    // unit: 'millisecond',\n                    format: 'timeFormat',\n                    // round: 'second'\n                },\n                ticks: {\n                    source: 'auto'\n                }\n            }\n        },\n        plugins: {\n            title: {\n                display: true,\n                text: \"Rating over Time\",\n                font: {\n                    size: 35\n                  }\n            },\n            zoom: {\n                zoom: {\n                  wheel: {\n                    enabled: true,\n                  },\n                  pinch: {\n                    enabled: true\n                  },\n                  mode: 'xy',\n                  drag: {\n                    enabled: true\n                  }\n                },\n                limits: {\n                    x: {min: 'original', max: 'original'},\n                    y: {min: 'original', max: 'original'}\n                },\n                pan: {\n                    // enabled: 'True'\n                }\n            },\n            legend: {\n                display: false\n            }\n        }\n    }\n\n    \n\n\n\n\n  return (\n    <>\n        <div>\n            <Line \n            data={data}\n            options={options}/>\n        </div>\n    </>\n  )\n}\n\nexport default TimeSeriesRating;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACIC,KAAK,IAAIC,OAAO,EAChBC,SAAS,EACTC,WAAW,EACXC,WAAW,EACXC,YAAY,EACZC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AACnB,OAAO,0BAA0B;AACjC,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,YAAY,EAAEC,kBAAkB,EAAEC,eAAe,QAAQ,UAAU;AAC5E,SAAQC,EAAE,QAAO,iBAAiB;AAClC,OAAOC,UAAU,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAK7CjB,OAAO,CAACkB,QAAQ,CACZjB,SAAS,EACTC,WAAW,EACXC,WAAW,EACXC,YAAY,EACZC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNM,UACJ,CAAC;;AAED;AACA;AACA,SAASM,gBAAgBA,CAAAC,IAAA,EAAqB;EAAA,IAApB;IAAEC;EAAe,CAAC,GAAAD,IAAA;EAExC;;EAEA;;EAGCE,OAAO,CAACC,GAAG,CAAE,WAAUF,cAAc,CAAC,CAAC,CAAC,CAACG,MAAO,EAAC,CAAC;EACnD,MAAMC,IAAI,GAAG;IACTC,MAAM,EAAGL,cAAc,CAACM,GAAG,CAAEC,IAAI,IAAG;MAChC,IAAIC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC;MAClC,IAAII,OAAO,GAAGC,QAAQ,CAACJ,OAAO,CAAC;MAC/B,OAAOG,OAAO;IAClB,CACA,CAAC;IACDE,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,QAAQ;MACfV,IAAI,EAAGJ,cAAc,GAAG,EAAE,GAACA,cAAc,CAACM,GAAG,CAAEC,IAAI,IAAGE,MAAM,CAACM,MAAM,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC,CAAE;MAC9E;MACAS,WAAW,EAAE,OAAO;MACpB;MACAC,oBAAoB,EAAE,SAAAA,CAASC,OAAO,EAAE;QACpC,IAAIC,KAAK,GAAGD,OAAO,CAACE,SAAS;QAC7B,IAAIC,SAAS,GAAGrB,cAAc,CAACmB,KAAK,CAAC,CAAChB,MAAM;QAC5C,IAAIkB,SAAS,KAAG,KAAK,EAAC;UAClB,OAAO,OAAO;QAClB,CAAC,MAAK,IAAGA,SAAS,KAAG,MAAM,EAAC;UACxB,OAAO,KAAK;QAChB,CAAC,MAAI;UACD,OAAO,MAAM;QACjB;MACJ;IACJ,CAAC;EAET,CAAC;EAGD,MAAMC,OAAO,GAAG;IACZC,MAAM,EAAE;MACJC,CAAC,EAAE,CAEH,CAAC;MACDC,CAAC,EAAE;QACCC,QAAQ,EAAE;UACNC,IAAI,EAAE;YACFC,MAAM,EAAErC;UACZ;QACJ,CAAC;QACDsC,IAAI,EAAE,MAAM;QACZC,IAAI,EAAE;UACF;UACAC,MAAM,EAAE;UACR;QACJ,CAAC;;QACDC,KAAK,EAAE;UACHC,MAAM,EAAE;QACZ;MACJ;IACJ,CAAC;IACDC,OAAO,EAAE;MACLC,KAAK,EAAE;QACHC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE,kBAAkB;QACxBC,IAAI,EAAE;UACFC,IAAI,EAAE;QACR;MACN,CAAC;MACDC,IAAI,EAAE;QACFA,IAAI,EAAE;UACJC,KAAK,EAAE;YACLC,OAAO,EAAE;UACX,CAAC;UACDC,KAAK,EAAE;YACLD,OAAO,EAAE;UACX,CAAC;UACDE,IAAI,EAAE,IAAI;UACVC,IAAI,EAAE;YACJH,OAAO,EAAE;UACX;QACF,CAAC;QACDI,MAAM,EAAE;UACJrB,CAAC,EAAE;YAACsB,GAAG,EAAE,UAAU;YAAEC,GAAG,EAAE;UAAU,CAAC;UACrCxB,CAAC,EAAE;YAACuB,GAAG,EAAE,UAAU;YAAEC,GAAG,EAAE;UAAU;QACxC,CAAC;QACDC,GAAG,EAAE;UACD;QAAA;MAER,CAAC;MACDC,MAAM,EAAE;QACJd,OAAO,EAAE;MACb;IACJ;EACJ,CAAC;EAOH,oBACE1C,OAAA,CAAAE,SAAA;IAAAuD,QAAA,eACIzD,OAAA;MAAAyD,QAAA,eACIzD,OAAA,CAACP,IAAI;QACLiB,IAAI,EAAEA,IAAK;QACXkB,OAAO,EAAEA;MAAQ;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB;EAAC,gBACR,CAAC;AAEP;AAACC,EAAA,GA7GQ1D,gBAAgB;AA+GzB,eAAeA,gBAAgB;AAAC,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}