{"ast":null,"code":"var _jsxFileName = \"/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState } from \"react\";\nimport SearchBar from './components/SearchBar';\nimport Graphs from './components/Graphs';\nimport Filter from './components/Filter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [form, setForm] = useState({\n    username: \"\",\n    fromDate: \"\",\n    toDate: \"\"\n  });\n  const [chessgames, setChessGames] = useState([]);\n  const [cumulativeData, setCumulativeData] = useState();\n  const handleChange = e => {\n    let name = e.target.name;\n    let value = e.target.value;\n    if (name === 'username') {\n      setForm({\n        ...form,\n        username: value\n      });\n    }\n    if (name === 'fromDate') {\n      let date = new Date(value);\n      date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000);\n      setForm({\n        ...form,\n        fromDate: date\n      });\n    }\n    if (name === 'toDate') {\n      let date = new Date(value);\n      date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000);\n      setForm({\n        ...form,\n        toDate: date\n      });\n    }\n  };\n\n  // function that takes date (month-year) as input and returns chess data\n\n  async function getChessData(month, year) {\n    if (month == 12) {\n      month = 1;\n      month = month.toString().padStart(2, '0');\n    } else if (month >= 9 && month < 12) {\n      month++;\n    } else {\n      month++;\n      month = month.toString().padStart(2, '0');\n    }\n    const response = await fetch(`https://api.chess.com/pub/player/${form.username}/games/${year}/${month}`);\n    const data = await response.json();\n    return data;\n  }\n\n  // takes form data as input, and returns all chess data in range (calls getChessData function) \n  async function collectAllData(e) {\n    e.preventDefault();\n    if (form.username === \"\") {\n      alert(\"Please enter a username.\");\n    } else if (form.fromDate === \"\" || form.toDate === \"\") {\n      alert(\"Please enter a valid date range.\");\n    } else {\n      let begDate = new Date(form.fromDate);\n      let endDate = new Date(form.toDate);\n      let allData = [];\n      const today = new Date();\n      while (begDate <= endDate && begDate <= today) {\n        let curData = await getChessData(begDate.getMonth(), begDate.getFullYear());\n        curData['games'].map(game => {\n          let cleanGame = cleanData(game);\n          allData.push(cleanGame);\n        });\n        begDate.setMonth(begDate.getMonth() + 1);\n      }\n      setChessGames(allData);\n      setCumulativeData(getCumData(allData));\n      console.log(cumulativeData);\n    }\n  }\n\n  // take raw game data as input and return clean data in js object\n  // can add opening by parsing game PNG \n  const cleanData = rawGame => {\n    const draws = [\"timevsinsufficient\", \"stalemate\", \"repetition\", \"agreed\", \"insufficient\", \"50move\"];\n    const losses = [\"checkmated\", \"timeout\", \"resigned\", \"lose\", \"abandoned\"];\n    const cleanGame = {\n      time: rawGame.end_time,\n      opponent: \"\",\n      opponent_rating: \"\",\n      opponent_profile: \"\",\n      result: \"\",\n      url: rawGame.url,\n      game_type: rawGame.time_class,\n      color: \"\",\n      rating: \"\"\n    };\n    if (rawGame.white.username === form.username) {\n      cleanGame.color = \"white\";\n      cleanGame.rating = rawGame.white.rating;\n      cleanGame.opponent = rawGame.black.username;\n      cleanGame.opponent_rating = rawGame.black.rating;\n      cleanGame.opponent_profile = rawGame.black[\"@id\"];\n      if (rawGame.white.result === \"win\") {\n        cleanGame.result = \"win\";\n      } else if (draws.includes(rawGame.white.result)) {\n        cleanGame.result = \"draw\";\n      } else if (losses.includes(rawGame.white.result)) {\n        cleanGame.result = \"loss\";\n      }\n    } else {\n      cleanGame.color = \"black\";\n      cleanGame.rating = rawGame.black.rating;\n      cleanGame.opponent = rawGame.white.username;\n      cleanGame.opponent_rating = rawGame.white.rating;\n      cleanGame.opponent_profile = rawGame.white[\"@id\"];\n      if (rawGame.black.result === \"win\") {\n        cleanGame.result = \"win\";\n      } else if (draws.includes(rawGame.black.result)) {\n        cleanGame.result = \"draw\";\n      } else if (losses.includes(rawGame.black.result)) {\n        cleanGame.result = \"loss\";\n      }\n    }\n    return cleanGame;\n  };\n  const getCumData = cleanData => {\n    const cumData = {\n      games_by_color: {\n        white: {\n          win: 0,\n          loss: 0,\n          draw: 0\n        },\n        black: {\n          win: 0,\n          loss: 0,\n          draw: 0\n        }\n      },\n      games_by_time: {\n        morning: {\n          win: 0,\n          loss: 0,\n          draw: 0\n        },\n        afternoon: {\n          win: 0,\n          loss: 0,\n          draw: 0\n        },\n        evening: {\n          win: 0,\n          loss: 0,\n          draw: 0\n        },\n        night: {\n          win: 0,\n          loss: 0,\n          draw: 0\n        }\n      }\n    };\n    cleanData.forEach(game => {\n      const curResult = game.result;\n      const curTime = new Date();\n      curTime.setTime(game.time * 1000);\n      const gameHour = curTime.getHours();\n      cumData.games_by_color[game.color][curResult]++;\n      if (gameHour >= 6 && gameHour < 12) {\n        cumData.games_by_time.morning[curResult]++;\n      } else if (gameHour >= 12 && gameHour < 17) {\n        cumData.games_by_time.afternoon[curResult]++;\n      } else if (gameHour >= 17 && gameHour < 22) {\n        cumData.games_by_time.evening[curResult]++;\n      } else {\n        cumData.games_by_time.night[curResult]++;\n      }\n    });\n    return cumData;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tommy's Cool Chess App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SearchBar, {\n          handleChange: handleChange,\n          collectAllData: collectAllData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 7\n      }, this), cumulativeData !== undefined ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filtergraphs\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter\",\n          children: /*#__PURE__*/_jsxDEV(Filter, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graphs\",\n          children: /*#__PURE__*/_jsxDEV(Graphs, {\n            chessgames: chessgames,\n            cumulativeData: cumulativeData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 7\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"CN/QBDbd1jdkkqyDhRGEC1SY9BM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SearchBar","Graphs","Filter","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","form","setForm","username","fromDate","toDate","chessgames","setChessGames","cumulativeData","setCumulativeData","handleChange","e","name","target","value","date","Date","setTime","getTime","getTimezoneOffset","getChessData","month","year","toString","padStart","response","fetch","data","json","collectAllData","preventDefault","alert","begDate","endDate","allData","today","curData","getMonth","getFullYear","map","game","cleanGame","cleanData","push","setMonth","getCumData","console","log","rawGame","draws","losses","time","end_time","opponent","opponent_rating","opponent_profile","result","url","game_type","time_class","color","rating","white","black","includes","cumData","games_by_color","win","loss","draw","games_by_time","morning","afternoon","evening","night","forEach","curResult","curTime","gameHour","getHours","children","className","fileName","_jsxFileName","lineNumber","columnNumber","undefined","_c","$RefreshReg$"],"sources":["/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState } from \"react\";\nimport SearchBar from './components/SearchBar';\nimport Graphs from './components/Graphs';\nimport Filter from './components/Filter';\n\nfunction App() {\n\n  const [form, setForm] = useState({\n    username: \"\",\n    fromDate: \"\",\n    toDate: \"\"\n  })\n\n  const [chessgames, setChessGames] = useState([])\n\n  const [cumulativeData, setCumulativeData] = useState()\n\n  const handleChange = (e) => {\n    let name = e.target.name;\n    let value = e.target.value;\n\n    if (name === 'username') {\n        setForm({...form, username: value})\n      }\n    if (name === 'fromDate') {\n      let date = new Date(value);\n      date.setTime(date.getTime()+date.getTimezoneOffset()*60*1000);\n\n      setForm({...form, fromDate: date});\n    }\n    if (name === 'toDate') {\n      let date = new Date(value)\n      date.setTime(date.getTime()+date.getTimezoneOffset()*60*1000);\n\n      setForm({...form, toDate: date});\n    }\n  }\n\n\n  // function that takes date (month-year) as input and returns chess data\n\n  async function getChessData(month, year){\n    if (month == 12){\n      month = 1;\n      month = month.toString().padStart(2, '0');\n    } else if(month >= 9 && month<12){\n      month++;\n    }else{\n      month++;\n      month = month.toString().padStart(2, '0')\n    }\n  \n    const response = await fetch(`https://api.chess.com/pub/player/${form.username}/games/${year}/${month}`);\n    const data = await response.json();\n    return data;\n  }\n\n  // takes form data as input, and returns all chess data in range (calls getChessData function) \n  async function collectAllData(e){\n    e.preventDefault();\n    \n    if(form.username === \"\"){\n      alert(\"Please enter a username.\");\n    } else if(form.fromDate === \"\" || form.toDate === \"\"){\n      alert(\"Please enter a valid date range.\");\n    }else{\n      let begDate = new Date(form.fromDate);\n      let endDate = new Date(form.toDate);\n      let allData = [];\n      const today = new Date();\n\n      while ((begDate<=endDate) && begDate<= today){\n        let curData = await getChessData(begDate.getMonth(), begDate.getFullYear());\n        curData['games'].map((game)=>{\n          let cleanGame = cleanData(game);\n          allData.push(cleanGame);\n        });\n        begDate.setMonth(begDate.getMonth()+1);\n      }\n      setChessGames(allData);\n      setCumulativeData(getCumData(allData));\n      console.log(cumulativeData);\n    }\n    }\n\n  // take raw game data as input and return clean data in js object\n  // can add opening by parsing game PNG \n  const cleanData = (rawGame) => {\n    const draws = [\"timevsinsufficient\", \"stalemate\", \"repetition\", \"agreed\", \"insufficient\", \"50move\"];\n    const losses = [\"checkmated\", \"timeout\", \"resigned\", \"lose\", \"abandoned\"];\n    const cleanGame = {\n      time: rawGame.end_time,\n      opponent: \"\",\n      opponent_rating: \"\",\n      opponent_profile: \"\",\n      result: \"\",\n      url: rawGame.url,\n      game_type: rawGame.time_class,\n      color: \"\",\n      rating: \"\"\n    };\n    if(rawGame.white.username === form.username){\n      cleanGame.color = \"white\";\n      cleanGame.rating = rawGame.white.rating;\n\n      cleanGame.opponent = rawGame.black.username;\n      cleanGame.opponent_rating = rawGame.black.rating;\n      cleanGame.opponent_profile = rawGame.black[\"@id\"];\n\n\n      if (rawGame.white.result === \"win\"){\n        cleanGame.result = \"win\";\n      }else if(draws.includes(rawGame.white.result)){\n        cleanGame.result = \"draw\"\n      }else if(losses.includes(rawGame.white.result)){\n        cleanGame.result = \"loss\"\n      }\n    } else{\n      cleanGame.color = \"black\";\n      cleanGame.rating = rawGame.black.rating;\n\n      cleanGame.opponent = rawGame.white.username;\n      cleanGame.opponent_rating = rawGame.white.rating;\n      cleanGame.opponent_profile = rawGame.white[\"@id\"];\n\n      if (rawGame.black.result === \"win\"){\n        cleanGame.result = \"win\";\n      }else if(draws.includes(rawGame.black.result)){\n        cleanGame.result = \"draw\"\n      }else if(losses.includes(rawGame.black.result)){\n        cleanGame.result = \"loss\"\n      }\n    }\n\n    return cleanGame;\n    \n  }\n\n  const getCumData = (cleanData) => {\n    const cumData = {\n      games_by_color: {\n        white: {\n          win: 0,\n          loss: 0,\n          draw: 0\n        },\n        black: {\n          win: 0,\n          loss: 0,\n          draw: 0\n        },\n      },\n      games_by_time: {\n        morning: {\n          win: 0,\n          loss: 0,\n          draw: 0\n        },\n        afternoon: {\n          win: 0,\n          loss: 0,\n          draw: 0\n        },\n        evening: {\n          win: 0,\n          loss: 0,\n          draw: 0\n        },\n        night: {\n          win: 0,\n          loss: 0,\n          draw: 0\n        }\n      }\n    }\n    cleanData.forEach((game)=>{\n      const curResult = game.result;\n      const curTime = new Date();\n      curTime.setTime(game.time * 1000)\n\n      const gameHour = (curTime.getHours());\n\n      cumData.games_by_color[game.color][curResult] ++;\n\n      if (gameHour >= 6 && gameHour <12){\n        cumData.games_by_time.morning[curResult] ++;\n      } else if(gameHour >= 12 && gameHour <17){\n        cumData.games_by_time.afternoon[curResult] ++;\n      } else if(gameHour >= 17 && gameHour <22){\n        cumData.games_by_time.evening[curResult] ++;\n      } else {\n        cumData.games_by_time.night[curResult] ++;\n      }\n    });\n\n    return cumData;\n  }\n\n  return (\n    <>\n    <div className=\"App\">\n      <h1>Tommy's Cool Chess App</h1>\n      <div>\n        <SearchBar handleChange={handleChange} collectAllData={collectAllData}/>\n      </div>\n      {\n        cumulativeData !== undefined ?\n      <div className='filtergraphs'>\n        <div className='filter'>\n          <Filter />\n        </div>\n        <div className='graphs'>\n          <Graphs chessgames={chessgames} cumulativeData ={cumulativeData} />\n        </div> \n      </div>\n      :null\n      }\n    </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}