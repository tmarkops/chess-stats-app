{"ast":null,"code":"var _jsxFileName = \"/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState } from \"react\";\nimport SearchBar from './components/SearchBar';\nimport Graphs from './components/Graphs';\nimport ColorPicker from './components/ColorPicker';\nimport GameTypes from './components/GameTypes';\nimport logo from './logo.webp';\nimport Loader from './components/Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [form, setForm] = useState({\n    username: \"\",\n    fromDate: \"\",\n    toDate: \"\"\n  });\n  const [filter, setFilter] = useState({\n    color: \"cumulative\",\n    timeFormat: \"bullet\"\n  });\n  const [chessgames, setChessGames] = useState([]);\n  const [cumulativeData, setCumulativeData] = useState({\n    bullet: {},\n    blitz: {},\n    rapid: {},\n    daily: {}\n  });\n  const [loading, setLoading] = useState(false);\n\n  // function clearFields(event) {\n  //   // we have to convert event.target to array\n  //   // we use from method to convert event.target to array\n  //   // after that we will use forEach function to go through every input to clear it\n  //   Array.from(event.target).forEach((e) => (e.value = \"\"));\n  // }\n  // const submitFormHandler = (e) => {\n  //   e.preventDefault();\n  //   clearFields(e);\n  //   setForm({\n  //     username: \"\",\n  //     fromDate: \"\",\n  //     toDate: \"\"\n  //   })\n\n  // }\n\n  const handleChange = e => {\n    let name = e.target.name;\n    let value = e.target.value;\n    if (name === 'username') {\n      setForm({\n        ...form,\n        username: value\n      });\n    }\n    if (name === 'fromDate') {\n      let date = new Date(value);\n      date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000);\n      setForm({\n        ...form,\n        fromDate: date\n      });\n    }\n    if (name === 'toDate') {\n      let date = new Date(value);\n      date.setTime(date.getTime() + date.getTimezoneOffset() * 60 * 1000);\n      setForm({\n        ...form,\n        toDate: date\n      });\n    }\n  };\n  async function changeTimeFormat(e) {\n    e.preventDefault();\n    let newTimeFormat = e.target.value;\n    setFilter({\n      ...filter,\n      timeFormat: newTimeFormat\n    });\n  }\n  async function changeColorPicker(e) {\n    e.preventDefault();\n    let newColor = e.target.value;\n    setFilter({\n      ...filter,\n      color: newColor\n    });\n  }\n\n  // function that takes date (month-year) as input and returns chess data\n  async function getChessData(month, year) {\n    if (month === 12) {\n      month = 1;\n      month = month.toString().padStart(2, '0');\n    } else if (month >= 9 && month < 12) {\n      month++;\n    } else {\n      month++;\n      month = month.toString().padStart(2, '0');\n    }\n    setLoading(true);\n    const response = await fetch(`https://api.chess.com/pub/player/${form.username}/games/${year}/${month}`);\n    const data = await response.json();\n    setLoading(false);\n    return data;\n  }\n\n  // takes form data as input, and returns all chess data in range (calls getChessData function) \n  async function collectAllData(e) {\n    e.preventDefault();\n    if (form.username === \"\") {\n      alert(\"Please enter a username.\");\n    } else if (form.fromDate === \"\" || form.toDate === \"\") {\n      alert(\"Please enter a valid date range.\");\n    } else {\n      let begDate = new Date(form.fromDate);\n      let endDate = new Date(form.toDate);\n      let allData = [];\n      const today = new Date();\n      while (begDate <= endDate && begDate <= today) {\n        let curData = await getChessData(begDate.getMonth(), begDate.getFullYear());\n        curData['games'].map(game => {\n          let cleanGame = cleanData(game);\n          return allData.push(cleanGame);\n        });\n        begDate.setMonth(begDate.getMonth() + 1);\n      }\n      setChessGames(allData);\n      setCumulativeData(oldState => ({\n        ...oldState,\n        bullet: getCumData(allData, 'bullet')\n      }));\n      setCumulativeData(oldState => ({\n        ...oldState,\n        rapid: getCumData(allData, 'rapid')\n      }));\n      setCumulativeData(oldState => ({\n        ...oldState,\n        blitz: getCumData(allData, 'blitz')\n      }));\n      setCumulativeData(oldState => ({\n        ...oldState,\n        daily: getCumData(allData, 'daily')\n      }));\n      form.username = \"\";\n      form.fromDate = \"\";\n      form.toDate = \"\";\n    }\n  }\n\n  // take raw game data as input and return clean data in js object\n  // can add opening data by parsing game PNG \n  const cleanData = rawGame => {\n    const draws = [\"timevsinsufficient\", \"stalemate\", \"repetition\", \"agreed\", \"insufficient\", \"50move\"];\n    const losses = [\"checkmated\", \"timeout\", \"resigned\", \"lose\", \"abandoned\"];\n    const cleanGame = {\n      time: rawGame.end_time,\n      opponent: \"\",\n      opponent_rating: \"\",\n      opponent_profile: \"\",\n      result: \"\",\n      url: rawGame.url,\n      game_type: rawGame.time_class,\n      color: \"\",\n      rating: \"\"\n    };\n    if (rawGame.white.username === form.username) {\n      cleanGame.color = \"white\";\n      cleanGame.rating = rawGame.white.rating;\n      cleanGame.opponent = rawGame.black.username;\n      cleanGame.opponent_rating = rawGame.black.rating;\n      cleanGame.opponent_profile = rawGame.black[\"@id\"];\n      if (rawGame.white.result === \"win\") {\n        cleanGame.result = \"win\";\n      } else if (draws.includes(rawGame.white.result)) {\n        cleanGame.result = \"draw\";\n      } else if (losses.includes(rawGame.white.result)) {\n        cleanGame.result = \"loss\";\n      }\n    } else {\n      cleanGame.color = \"black\";\n      cleanGame.rating = rawGame.black.rating;\n      cleanGame.opponent = rawGame.white.username;\n      cleanGame.opponent_rating = rawGame.white.rating;\n      cleanGame.opponent_profile = rawGame.white[\"@id\"];\n      if (rawGame.black.result === \"win\") {\n        cleanGame.result = \"win\";\n      } else if (draws.includes(rawGame.black.result)) {\n        cleanGame.result = \"draw\";\n      } else if (losses.includes(rawGame.black.result)) {\n        cleanGame.result = \"loss\";\n      }\n    }\n    return cleanGame;\n  };\n  const getCumData = (cleanData, timeFormat) => {\n    const cumData = {\n      white: {\n        games_by_time: {\n          morning: {\n            win: 0,\n            loss: 0,\n            draw: 0\n          },\n          afternoon: {\n            win: 0,\n            loss: 0,\n            draw: 0\n          },\n          evening: {\n            win: 0,\n            loss: 0,\n            draw: 0\n          },\n          night: {\n            win: 0,\n            loss: 0,\n            draw: 0\n          }\n        }\n      },\n      black: {\n        games_by_time: {\n          morning: {\n            win: 0,\n            loss: 0,\n            draw: 0\n          },\n          afternoon: {\n            win: 0,\n            loss: 0,\n            draw: 0\n          },\n          evening: {\n            win: 0,\n            loss: 0,\n            draw: 0\n          },\n          night: {\n            win: 0,\n            loss: 0,\n            draw: 0\n          }\n        }\n      },\n      cumulative: {\n        games_by_time: {\n          morning: {\n            win: 0,\n            loss: 0,\n            draw: 0\n          },\n          afternoon: {\n            win: 0,\n            loss: 0,\n            draw: 0\n          },\n          evening: {\n            win: 0,\n            loss: 0,\n            draw: 0\n          },\n          night: {\n            win: 0,\n            loss: 0,\n            draw: 0\n          }\n        }\n      }\n    };\n    cleanData.forEach(game => {\n      const curColor = game.color;\n      const curResult = game.result;\n      const curTime = new Date();\n      curTime.setTime(game.time * 1000);\n      const gameHour = curTime.getHours();\n\n      // cumData.games_by_color[game.color][curResult] ++;\n      if (game.game_type === timeFormat) {\n        if (curColor === 'white') {\n          if (gameHour >= 6 && gameHour < 12) {\n            cumData[curColor].games_by_time.morning[curResult]++;\n          } else if (gameHour >= 12 && gameHour < 17) {\n            cumData[curColor].games_by_time.afternoon[curResult]++;\n          } else if (gameHour >= 17 && gameHour < 22) {\n            cumData[curColor].games_by_time.evening[curResult]++;\n          } else {\n            cumData[curColor].games_by_time.night[curResult]++;\n          }\n        } else {\n          if (gameHour >= 6 && gameHour < 12) {\n            cumData[curColor].games_by_time.morning[curResult]++;\n          } else if (gameHour >= 12 && gameHour < 17) {\n            cumData[curColor].games_by_time.afternoon[curResult]++;\n          } else if (gameHour >= 17 && gameHour < 22) {\n            cumData[curColor].games_by_time.evening[curResult]++;\n          } else {\n            cumData[curColor].games_by_time.night[curResult]++;\n          }\n        }\n        if (gameHour >= 6 && gameHour < 12) {\n          cumData.cumulative.games_by_time.morning[curResult]++;\n        } else if (gameHour >= 12 && gameHour < 17) {\n          cumData.cumulative.games_by_time.afternoon[curResult]++;\n        } else if (gameHour >= 17 && gameHour < 22) {\n          cumData.cumulative.games_by_time.evening[curResult]++;\n        } else {\n          cumData.cumulative.games_by_time.night[curResult]++;\n        }\n      }\n    });\n    return cumData;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"titlesearch\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo,\n            alt: \"chess piece\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 11\n          }, this), \"\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Tommy's Cool Chess App\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n          handleChange: handleChange,\n          collectAllData: collectAllData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 7\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 7\n      }, this) : \"white\" in cumulativeData.bullet ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(GameTypes, {\n            changeTimeFormat: changeTimeFormat,\n            filter: filter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(ColorPicker, {\n            changeColorPicker: changeColorPicker,\n            filter: filter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graphs\",\n          children: /*#__PURE__*/_jsxDEV(Graphs, {\n            chessgames: chessgames,\n            cumulativeData: cumulativeData[filter.timeFormat][filter.color]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 7\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"mG63/O0GtTui+lGC6VlQI6EjcnQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SearchBar","Graphs","ColorPicker","GameTypes","logo","Loader","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","form","setForm","username","fromDate","toDate","filter","setFilter","color","timeFormat","chessgames","setChessGames","cumulativeData","setCumulativeData","bullet","blitz","rapid","daily","loading","setLoading","handleChange","e","name","target","value","date","Date","setTime","getTime","getTimezoneOffset","changeTimeFormat","preventDefault","newTimeFormat","changeColorPicker","newColor","getChessData","month","year","toString","padStart","response","fetch","data","json","collectAllData","alert","begDate","endDate","allData","today","curData","getMonth","getFullYear","map","game","cleanGame","cleanData","push","setMonth","oldState","getCumData","rawGame","draws","losses","time","end_time","opponent","opponent_rating","opponent_profile","result","url","game_type","time_class","rating","white","black","includes","cumData","games_by_time","morning","win","loss","draw","afternoon","evening","night","cumulative","forEach","curColor","curResult","curTime","gameHour","getHours","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState } from \"react\";\nimport SearchBar from './components/SearchBar';\nimport Graphs from './components/Graphs';\nimport ColorPicker from './components/ColorPicker';\nimport GameTypes from './components/GameTypes';\nimport logo from './logo.webp';\nimport Loader from './components/Loader';\n\nfunction App() {\n\n  const [form, setForm] = useState({\n    username: \"\",\n    fromDate: \"\",\n    toDate: \"\"\n  })\n\n  const [filter, setFilter] = useState({\n    color: \"cumulative\",\n    timeFormat: \"bullet\"\n  })\n\n  const [chessgames, setChessGames] = useState([])\n\n  const [cumulativeData, setCumulativeData] = useState({\n    bullet: {},\n    blitz: {},\n    rapid: {},\n    daily: {}\n  });\n\n  const [loading, setLoading] = useState(false);\n\n  // function clearFields(event) {\n  //   // we have to convert event.target to array\n  //   // we use from method to convert event.target to array\n  //   // after that we will use forEach function to go through every input to clear it\n  //   Array.from(event.target).forEach((e) => (e.value = \"\"));\n  // }\n  // const submitFormHandler = (e) => {\n  //   e.preventDefault();\n  //   clearFields(e);\n  //   setForm({\n  //     username: \"\",\n  //     fromDate: \"\",\n  //     toDate: \"\"\n  //   })\n\n  // }\n\n\n  const handleChange = (e) => {\n    let name = e.target.name;\n    let value = e.target.value;\n\n    if (name === 'username') {\n        setForm({...form, username: value})\n      }\n    if (name === 'fromDate') {\n      let date = new Date(value);\n      date.setTime(date.getTime()+date.getTimezoneOffset()*60*1000);\n\n      setForm({...form, fromDate: date});\n    }\n    if (name === 'toDate') {\n      let date = new Date(value)\n      date.setTime(date.getTime()+date.getTimezoneOffset()*60*1000);\n\n      setForm({...form, toDate: date});\n    }\n  }\n\n\n\n  async function changeTimeFormat(e){\n    e.preventDefault();\n    let newTimeFormat = e.target.value;\n    setFilter({...filter, timeFormat: newTimeFormat});\n  }\n\n  async function changeColorPicker(e){\n    e.preventDefault();\n\n    let newColor = e.target.value;\n    setFilter({...filter, color: newColor})\n  }\n\n  // function that takes date (month-year) as input and returns chess data\n  async function getChessData(month, year){\n    if (month === 12){\n      month = 1;\n      month = month.toString().padStart(2, '0');\n    } else if(month >= 9 && month<12){\n      month++;\n    }else{\n      month++;\n      month = month.toString().padStart(2, '0')\n    }\n    setLoading(true);\n    const response = await fetch(`https://api.chess.com/pub/player/${form.username}/games/${year}/${month}`);\n    const data = await response.json();\n    setLoading(false);\n    return data;\n  }\n\n  // takes form data as input, and returns all chess data in range (calls getChessData function) \n  async function collectAllData(e){\n    e.preventDefault();\n    \n    if(form.username === \"\"){\n      alert(\"Please enter a username.\");\n    } else if(form.fromDate === \"\" || form.toDate === \"\"){\n      alert(\"Please enter a valid date range.\");\n    }else{\n      let begDate = new Date(form.fromDate);\n      let endDate = new Date(form.toDate);\n      let allData = [];\n      const today = new Date();\n\n      while ((begDate<=endDate) && begDate<= today){\n        let curData = await getChessData(begDate.getMonth(), begDate.getFullYear());\n        curData['games'].map((game)=>{\n          let cleanGame = cleanData(game);\n          return allData.push(cleanGame);\n        });\n        begDate.setMonth(begDate.getMonth()+1);\n      }\n      setChessGames(allData);\n      setCumulativeData(oldState=>({...oldState, bullet: (getCumData(allData,'bullet'))}));\n      setCumulativeData(oldState=>({...oldState, rapid: (getCumData(allData,'rapid'))}));\n      setCumulativeData(oldState=>({...oldState, blitz: (getCumData(allData,'blitz'))}));\n      setCumulativeData(oldState=>({...oldState, daily: (getCumData(allData,'daily'))}));\n\n      form.username = \"\";\n      form.fromDate = \"\";\n      form.toDate = \"\";\n    }\n    }\n\n\n\n  // take raw game data as input and return clean data in js object\n  // can add opening data by parsing game PNG \n  const cleanData = (rawGame) => {\n    const draws = [\"timevsinsufficient\", \"stalemate\", \"repetition\", \"agreed\", \"insufficient\", \"50move\"];\n    const losses = [\"checkmated\", \"timeout\", \"resigned\", \"lose\", \"abandoned\"];\n    const cleanGame = {\n      time: rawGame.end_time,\n      opponent: \"\",\n      opponent_rating: \"\",\n      opponent_profile: \"\",\n      result: \"\",\n      url: rawGame.url,\n      game_type: rawGame.time_class,\n      color: \"\",\n      rating: \"\"\n    };\n    if(rawGame.white.username === form.username){\n      cleanGame.color = \"white\";\n      cleanGame.rating = rawGame.white.rating;\n\n      cleanGame.opponent = rawGame.black.username;\n      cleanGame.opponent_rating = rawGame.black.rating;\n      cleanGame.opponent_profile = rawGame.black[\"@id\"];\n\n\n      if (rawGame.white.result === \"win\"){\n        cleanGame.result = \"win\";\n      }else if(draws.includes(rawGame.white.result)){\n        cleanGame.result = \"draw\"\n      }else if(losses.includes(rawGame.white.result)){\n        cleanGame.result = \"loss\"\n      }\n    } else{\n      cleanGame.color = \"black\";\n      cleanGame.rating = rawGame.black.rating;\n\n      cleanGame.opponent = rawGame.white.username;\n      cleanGame.opponent_rating = rawGame.white.rating;\n      cleanGame.opponent_profile = rawGame.white[\"@id\"];\n\n      if (rawGame.black.result === \"win\"){\n        cleanGame.result = \"win\";\n      }else if(draws.includes(rawGame.black.result)){\n        cleanGame.result = \"draw\"\n      }else if(losses.includes(rawGame.black.result)){\n        cleanGame.result = \"loss\"\n      }\n    }\n\n    return cleanGame;\n    \n  }\n\n  const getCumData = (cleanData, timeFormat) => {\n    const cumData = {\n      white: {\n        games_by_time: {\n            morning: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            afternoon: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            evening: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            night: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            }\n        }\n      },\n      black: {\n        games_by_time: {\n            morning: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            afternoon: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            evening: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            night: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            }\n        }\n      },\n      cumulative: {\n        games_by_time: {\n            morning: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            afternoon: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            evening: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            night: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            }\n        }\n      }\n    }\n    cleanData.forEach((game)=>{\n        const curColor = game.color\n        const curResult = game.result;\n        const curTime = new Date();\n        curTime.setTime(game.time * 1000)\n\n        const gameHour = (curTime.getHours());\n\n        // cumData.games_by_color[game.color][curResult] ++;\n        if (game.game_type === timeFormat){\n          if (curColor === 'white'){\n              if (gameHour >= 6 && gameHour <12){\n                  cumData[curColor].games_by_time.morning[curResult] ++;\n              } else if(gameHour >= 12 && gameHour <17){\n                  cumData[curColor].games_by_time.afternoon[curResult] ++;\n              } else if(gameHour >= 17 && gameHour <22){\n                  cumData[curColor].games_by_time.evening[curResult] ++;\n              } else {\n                  cumData[curColor].games_by_time.night[curResult] ++;\n              }\n          } else{\n              if (gameHour >= 6 && gameHour <12){\n                  cumData[curColor].games_by_time.morning[curResult] ++;\n              } else if(gameHour >= 12 && gameHour <17){\n                  cumData[curColor].games_by_time.afternoon[curResult] ++;\n              } else if(gameHour >= 17 && gameHour <22){\n                  cumData[curColor].games_by_time.evening[curResult] ++;\n              } else {\n                  cumData[curColor].games_by_time.night[curResult] ++;\n              }\n          }\n          if (gameHour >= 6 && gameHour <12){\n              cumData.cumulative.games_by_time.morning[curResult] ++;\n          } else if(gameHour >= 12 && gameHour <17){\n              cumData.cumulative.games_by_time.afternoon[curResult] ++;\n          } else if(gameHour >= 17 && gameHour <22){\n              cumData.cumulative.games_by_time.evening[curResult] ++;\n          } else {\n              cumData.cumulative.games_by_time.night[curResult] ++;\n          }\n      }\n    }\n    \n    );\n\n    return cumData;\n}\n\n  return (\n    <>\n    <div className=\"App\">\n      <div className='titlesearch'>\n        <div className='logo'>\n          <img src={logo} alt='chess piece' />\n          &nbsp;&nbsp;\n          <h1>Tommy's Cool Chess App</h1>\n          <br/>\n        </div>\n        <SearchBar handleChange={handleChange} collectAllData={collectAllData}/>\n      \n      </div>\n      \n      {loading ?\n      <div>\n        <Loader />\n      </div>\n      :\n        (\"white\" in cumulativeData.bullet) ?\n      <div className='content'>\n        <div>\n          <GameTypes changeTimeFormat={changeTimeFormat} filter={filter}/>\n        </div>\n        <div>\n          <ColorPicker changeColorPicker={changeColorPicker} filter={filter}/>\n        </div>\n        <div className='graphs'>\n          <Graphs chessgames={chessgames} cumulativeData ={cumulativeData[filter.timeFormat][filter.color]} />\n        </div> \n      </div>\n      :null\n      }\n    </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}