{"ast":null,"code":"import React from'react';import{Chart as ChartJS,TimeScale,LinearScale,LineElement,PointElement,Title,Tooltip,Legend}from'chart.js';import'chartjs-adapter-date-fns';import{Line}from\"react-chartjs-2\";import{milliseconds,millisecondsInHour,monthsInQuarter}from'date-fns';import{de}from'date-fns/locale';import zoomPlugin from'chartjs-plugin-zoom';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";ChartJS.register(TimeScale,LinearScale,LineElement,PointElement,Title,Tooltip,Legend,zoomPlugin);// I can also pass the currentColorState and display only white or only black or both \n// I can also pass the result of each game, and if its a win it will be a green dot vs  red dot\nfunction TimeSeriesRating(_ref){var cumulativeData=_ref.cumulativeData;// console.log(cumulativeData.map((game)=>Object.keys(game)[0]));\n// data must be in this format: [ {timedata in ms since 1970: value},...]\nvar data={labels:cumulativeData.length===0?[]:cumulativeData.map(function(game){var strDate=Object.keys(game)[0];var intDate=parseInt(strDate);return intDate;}),datasets:[{label:\"Rating\",data:cumulativeData.length===0?[]:cumulativeData.map(function(game){return Object.values(game)[0];}),// backgroundColor: 'aqua',\nborderColor:'black',// tension: 1,\npointBackgroundColor:cumulativeData.length===0?'aqua':function(context){var index=context.dataIndex;var curResult=cumulativeData[index].result;if(curResult==='win'){return'green';}else if(curResult==='loss'){return'red';}else{return'blue';}}}]};var options={scales:{y:{},x:{adapters:{date:{locale:de}},type:'time',time:{// unit: 'millisecond',\nformat:'timeFormat'// round: 'second'\n},ticks:{source:'auto'}}},plugins:{title:{display:true,text:\"Rating over Time\",font:{size:35}},zoom:{zoom:{wheel:{enabled:true},pinch:{enabled:true},mode:'xy',drag:{enabled:true}},limits:{x:{min:'original',max:'original'},y:{min:'original',max:'original'}},pan:{// enabled: 'True'\n}},legend:{display:false}}};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Line,{data:data,options:options})})});}export default TimeSeriesRating;","map":{"version":3,"names":["React","Chart","ChartJS","TimeScale","LinearScale","LineElement","PointElement","Title","Tooltip","Legend","Line","milliseconds","millisecondsInHour","monthsInQuarter","de","zoomPlugin","jsx","_jsx","Fragment","_Fragment","register","TimeSeriesRating","_ref","cumulativeData","data","labels","length","map","game","strDate","Object","keys","intDate","parseInt","datasets","label","values","borderColor","pointBackgroundColor","context","index","dataIndex","curResult","result","options","scales","y","x","adapters","date","locale","type","time","format","ticks","source","plugins","title","display","text","font","size","zoom","wheel","enabled","pinch","mode","drag","limits","min","max","pan","legend","children"],"sources":["/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/TimeSeriesRating.js"],"sourcesContent":["import React from 'react';\nimport {\n    Chart as ChartJS,\n    TimeScale,\n    LinearScale,\n    LineElement,\n    PointElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Line } from \"react-chartjs-2\";\nimport { milliseconds, millisecondsInHour, monthsInQuarter } from 'date-fns';\nimport {de} from 'date-fns/locale';\nimport zoomPlugin from 'chartjs-plugin-zoom';\n\n\n\n\nChartJS.register(\n    TimeScale,\n    LinearScale,\n    LineElement,\n    PointElement,\n    Title,\n    Tooltip,\n    Legend,\n    zoomPlugin\n);\n\n// I can also pass the currentColorState and display only white or only black or both \n// I can also pass the result of each game, and if its a win it will be a green dot vs  red dot\nfunction TimeSeriesRating({ cumulativeData }) {\n\n    // console.log(cumulativeData.map((game)=>Object.keys(game)[0]));\n\n    // data must be in this format: [ {timedata in ms since 1970: value},...]\n    \n\n    const data = {\n        labels : (cumulativeData.length === 0 ? [] : cumulativeData.map((game)=>{\n            let strDate = Object.keys(game)[0];\n            let intDate = parseInt(strDate)\n            return intDate;\n        })\n        ),\n        datasets: [\n            {\n                label: \"Rating\",\n                data: (cumulativeData.length === 0 ? [] :cumulativeData.map((game)=>Object.values(game)[0])),\n                // backgroundColor: 'aqua',\n                borderColor: 'black',\n                // tension: 1,\n                pointBackgroundColor: cumulativeData.length === 0 ? 'aqua' :function(context) {\n                    var index = context.dataIndex;\n                    var curResult = cumulativeData[index].result;\n                    if (curResult==='win'){\n                        return 'green';\n                    }else if(curResult==='loss'){\n                        return 'red';\n                    }else{\n                        return 'blue';\n                    }\n                }\n            }\n        ]\n    }\n\n\n    const options = {\n        scales: {\n            y: {\n\n            },\n            x: {\n                adapters: {\n                    date: {\n                        locale: de\n                    }\n                },\n                type: 'time',\n                time: {\n                    // unit: 'millisecond',\n                    format: 'timeFormat',\n                    // round: 'second'\n                },\n                ticks: {\n                    source: 'auto'\n                }\n            }\n        },\n        plugins: {\n            title: {\n                display: true,\n                text: \"Rating over Time\",\n                font: {\n                    size: 35\n                  }\n            },\n            zoom: {\n                zoom: {\n                  wheel: {\n                    enabled: true,\n                  },\n                  pinch: {\n                    enabled: true\n                  },\n                  mode: 'xy',\n                  drag: {\n                    enabled: true\n                  }\n                },\n                limits: {\n                    x: {min: 'original', max: 'original'},\n                    y: {min: 'original', max: 'original'}\n                },\n                pan: {\n                    // enabled: 'True'\n                }\n            },\n            legend: {\n                display: false\n            }\n        }\n    }\n\n    \n\n\n\n\n  return (\n    <>\n        <div>\n            <Line \n            data={data}\n            options={options}/>\n        </div>\n    </>\n  )\n}\n\nexport default TimeSeriesRating;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}