[{"/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/index.js":"1","/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/App.js":"2","/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/reportWebVitals.js":"3","/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/ColorPicker.js":"4","/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/Graphs.js":"5","/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/GameTypes.js":"6","/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/Loader.js":"7","/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/SearchBar.js":"8","/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/WinsByTimeGraph.js":"9","/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/TotalGamesDisplay.js":"10","/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/WinPercentageDisplay.js":"11"},{"size":535,"mtime":1686237882860,"results":"12","hashOfConfig":"13"},{"size":9438,"mtime":1686875220357,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1686237882861,"results":"15","hashOfConfig":"13"},{"size":1341,"mtime":1686863804621,"results":"16","hashOfConfig":"13"},{"size":775,"mtime":1686804245484,"results":"17","hashOfConfig":"13"},{"size":1673,"mtime":1686863967483,"results":"18","hashOfConfig":"13"},{"size":242,"mtime":1686873651638,"results":"19","hashOfConfig":"13"},{"size":800,"mtime":1686809837015,"results":"20","hashOfConfig":"13"},{"size":2124,"mtime":1686810698386,"results":"21","hashOfConfig":"13"},{"size":556,"mtime":1686803959011,"results":"22","hashOfConfig":"13"},{"size":3389,"mtime":1686861567299,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7bk98i",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/index.js",[],[],"/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/App.js",["59"],[],"import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport SearchBar from './components/SearchBar';\nimport Graphs from './components/Graphs';\nimport ColorPicker from './components/ColorPicker';\nimport GameTypes from './components/GameTypes';\nimport logo from './logo.webp';\nimport Loader from './components/Loader';\n\nfunction App() {\n\n  const [form, setForm] = useState({\n    username: \"\",\n    fromDate: \"\",\n    toDate: \"\"\n  })\n\n  const [filter, setFilter] = useState({\n    color: \"cumulative\",\n    timeFormat: \"bullet\"\n  })\n\n  const [chessgames, setChessGames] = useState([])\n\n  const [cumulativeData, setCumulativeData] = useState({\n    bullet: {},\n    blitz: {},\n    rapid: {},\n    daily: {}\n  });\n\n  const [loading, setLoading] = useState(false);\n\n  const handleChange = (e) => {\n    let name = e.target.name;\n    let value = e.target.value;\n\n    if (name === 'username') {\n        setForm({...form, username: value})\n      }\n    if (name === 'fromDate') {\n      let date = new Date(value);\n      date.setTime(date.getTime()+date.getTimezoneOffset()*60*1000);\n\n      setForm({...form, fromDate: date});\n    }\n    if (name === 'toDate') {\n      let date = new Date(value)\n      date.setTime(date.getTime()+date.getTimezoneOffset()*60*1000);\n\n      setForm({...form, toDate: date});\n    }\n  }\n\n\n\n  async function changeTimeFormat(e){\n    e.preventDefault();\n\n    let newTimeFormat = e.target.value;\n\n    setFilter({...filter, timeFormat: newTimeFormat});\n  }\n\n  async function changeColorPicker(e){\n    e.preventDefault();\n\n    let newColor = e.target.value;\n    setFilter({...filter, color: newColor})\n  }\n\n  // function that takes date (month-year) as input and returns chess data\n  async function getChessData(month, year){\n    if (month === 12){\n      month = 1;\n      month = month.toString().padStart(2, '0');\n    } else if(month >= 9 && month<12){\n      month++;\n    }else{\n      month++;\n      month = month.toString().padStart(2, '0')\n    }\n    setLoading(true);\n    const response = await fetch(`https://api.chess.com/pub/player/${form.username}/games/${year}/${month}`);\n    const data = await response.json();\n    setLoading(false);\n    return data;\n  }\n\n  // takes form data as input, and returns all chess data in range (calls getChessData function) \n  async function collectAllData(e){\n    e.preventDefault();\n    \n    if(form.username === \"\"){\n      alert(\"Please enter a username.\");\n    } else if(form.fromDate === \"\" || form.toDate === \"\"){\n      alert(\"Please enter a valid date range.\");\n    }else{\n      let begDate = new Date(form.fromDate);\n      let endDate = new Date(form.toDate);\n      let allData = [];\n      const today = new Date();\n\n      while ((begDate<=endDate) && begDate<= today){\n        let curData = await getChessData(begDate.getMonth(), begDate.getFullYear());\n        curData['games'].map((game)=>{\n          let cleanGame = cleanData(game);\n          return allData.push(cleanGame);\n        });\n        begDate.setMonth(begDate.getMonth()+1);\n      }\n      setChessGames(allData);\n      setCumulativeData(oldState=>({...oldState, bullet: (getCumData(allData,'bullet'))}));\n      setCumulativeData(oldState=>({...oldState, rapid: (getCumData(allData,'rapid'))}));\n      setCumulativeData(oldState=>({...oldState, blitz: (getCumData(allData,'blitz'))}));\n      setCumulativeData(oldState=>({...oldState, daily: (getCumData(allData,'daily'))}));\n    }\n    }\n\n\n\n  // take raw game data as input and return clean data in js object\n  // can add opening data by parsing game PNG \n  const cleanData = (rawGame) => {\n    const draws = [\"timevsinsufficient\", \"stalemate\", \"repetition\", \"agreed\", \"insufficient\", \"50move\"];\n    const losses = [\"checkmated\", \"timeout\", \"resigned\", \"lose\", \"abandoned\"];\n    const cleanGame = {\n      time: rawGame.end_time,\n      opponent: \"\",\n      opponent_rating: \"\",\n      opponent_profile: \"\",\n      result: \"\",\n      url: rawGame.url,\n      game_type: rawGame.time_class,\n      color: \"\",\n      rating: \"\"\n    };\n    if(rawGame.white.username === form.username){\n      cleanGame.color = \"white\";\n      cleanGame.rating = rawGame.white.rating;\n\n      cleanGame.opponent = rawGame.black.username;\n      cleanGame.opponent_rating = rawGame.black.rating;\n      cleanGame.opponent_profile = rawGame.black[\"@id\"];\n\n\n      if (rawGame.white.result === \"win\"){\n        cleanGame.result = \"win\";\n      }else if(draws.includes(rawGame.white.result)){\n        cleanGame.result = \"draw\"\n      }else if(losses.includes(rawGame.white.result)){\n        cleanGame.result = \"loss\"\n      }\n    } else{\n      cleanGame.color = \"black\";\n      cleanGame.rating = rawGame.black.rating;\n\n      cleanGame.opponent = rawGame.white.username;\n      cleanGame.opponent_rating = rawGame.white.rating;\n      cleanGame.opponent_profile = rawGame.white[\"@id\"];\n\n      if (rawGame.black.result === \"win\"){\n        cleanGame.result = \"win\";\n      }else if(draws.includes(rawGame.black.result)){\n        cleanGame.result = \"draw\"\n      }else if(losses.includes(rawGame.black.result)){\n        cleanGame.result = \"loss\"\n      }\n    }\n\n    return cleanGame;\n    \n  }\n\n  const getCumData = (cleanData, timeFormat) => {\n    const cumData = {\n      white: {\n        games_by_time: {\n            morning: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            afternoon: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            evening: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            night: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            }\n        }\n      },\n      black: {\n        games_by_time: {\n            morning: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            afternoon: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            evening: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            night: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            }\n        }\n      },\n      cumulative: {\n        games_by_time: {\n            morning: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            afternoon: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            evening: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            },\n            night: {\n            win: 0,\n            loss: 0,\n            draw: 0\n            }\n        }\n      }\n    }\n    cleanData.forEach((game)=>{\n        const curColor = game.color\n        const curResult = game.result;\n        const curTime = new Date();\n        curTime.setTime(game.time * 1000)\n\n        const gameHour = (curTime.getHours());\n\n        // cumData.games_by_color[game.color][curResult] ++;\n        if (game.game_type === timeFormat){\n          if (curColor === 'white'){\n              if (gameHour >= 6 && gameHour <12){\n                  cumData[curColor].games_by_time.morning[curResult] ++;\n              } else if(gameHour >= 12 && gameHour <17){\n                  cumData[curColor].games_by_time.afternoon[curResult] ++;\n              } else if(gameHour >= 17 && gameHour <22){\n                  cumData[curColor].games_by_time.evening[curResult] ++;\n              } else {\n                  cumData[curColor].games_by_time.night[curResult] ++;\n              }\n          } else{\n              if (gameHour >= 6 && gameHour <12){\n                  cumData[curColor].games_by_time.morning[curResult] ++;\n              } else if(gameHour >= 12 && gameHour <17){\n                  cumData[curColor].games_by_time.afternoon[curResult] ++;\n              } else if(gameHour >= 17 && gameHour <22){\n                  cumData[curColor].games_by_time.evening[curResult] ++;\n              } else {\n                  cumData[curColor].games_by_time.night[curResult] ++;\n              }\n          }\n          if (gameHour >= 6 && gameHour <12){\n              cumData.cumulative.games_by_time.morning[curResult] ++;\n          } else if(gameHour >= 12 && gameHour <17){\n              cumData.cumulative.games_by_time.afternoon[curResult] ++;\n          } else if(gameHour >= 17 && gameHour <22){\n              cumData.cumulative.games_by_time.evening[curResult] ++;\n          } else {\n              cumData.cumulative.games_by_time.night[curResult] ++;\n          }\n      }\n    }\n    \n    );\n\n    return cumData;\n}\n\n  return (\n    <>\n    <div className=\"App\">\n      <div className='titlesearch'>\n        <div className='logo'>\n          <img src={logo} alt='chess piece' />\n          &nbsp;&nbsp;\n          <h1>Tommy's Cool Chess App</h1>\n          <br/>\n        </div>\n        <SearchBar handleChange={handleChange} collectAllData={collectAllData}/>\n      \n      </div>\n      \n      {loading ?\n      <div>\n        <Loader />\n      </div>\n      :\n        (\"white\" in cumulativeData.bullet) ?\n      <div className='content'>\n        <div>\n          <GameTypes changeTimeFormat={changeTimeFormat} filter={filter}/>\n        </div>\n        <div>\n          <ColorPicker changeColorPicker={changeColorPicker} filter={filter}/>\n        </div>\n        <div className='graphs'>\n          <Graphs chessgames={chessgames} cumulativeData ={cumulativeData[filter.timeFormat][filter.color]} />\n        </div> \n      </div>\n      :null\n      }\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/reportWebVitals.js",[],[],"/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/ColorPicker.js",[],[],"/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/Graphs.js",[],[],"/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/GameTypes.js",[],[],"/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/Loader.js",[],[],"/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/SearchBar.js",["60"],[],"import React, { useState } from \"react\";\nimport './SearchBar.css';\n\nconst SearchBar = ({ handleChange, collectAllData }) => {\n\n  return (\n    <div className=\"searchbar\">\n      <form>\n        <label>Chess.com username: </label>\n        <input name=\"username\" type=\"search\" placeholder=\"Enter username\" onChange={(e)=>handleChange(e)}></input>\n        &nbsp; &nbsp; \n        <label>From: </label>\n        <input name=\"fromDate\" type=\"month\" onChange={(e)=>handleChange(e)}></input>\n        &nbsp; &nbsp; \n        <label>To: </label>\n        <input name=\"toDate\" type=\"month\" onChange={(e)=>handleChange(e)}></input>\n        &nbsp;&nbsp;\n        <button className='button-33' type=\"submit\" onClick={(e)=>collectAllData(e)}>GetData</button>\n      </form>\n      \n    </div>\n  )\n}\n\nexport default SearchBar","/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/WinsByTimeGraph.js",[],[],"/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/TotalGamesDisplay.js",[],[],"/Users/tommymarkopoulos/Desktop/coding/Git_Repos/chess-app/chess-stats-app/src/components/WinPercentageDisplay.js",[],[],{"ruleId":"61","severity":1,"message":"62","line":2,"column":17,"nodeType":"63","messageId":"64","endLine":2,"endColumn":26},{"ruleId":"61","severity":1,"message":"65","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":25},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used."]